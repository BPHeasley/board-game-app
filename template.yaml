AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  board-game-app

Globals: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: python3.12
    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        LOG_LEVEL: INFO
        POWERTOOLS_LOGGER_LOG_EVENT: TRUE
        POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
        POWERTOOLS_SERVICE_NAME: board-game-app
        POWERTOOLS_METRICS_NAMESPACE: BoardGameApp
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"

Parameters:
  UserPoolAdminGroupName:
    Description: User pool group name for API Administrators
    Type: String
    Default: BoardGameApp-Admins
  IndexDocument:
    Type: String
    Default: index.html

Resources:
  BoardGamesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-BoardGamesTable-temp
      AttributeDefinitions:
        - AttributeName: "title"
          AttributeType: "S"
        - AttributeName: "date"
          AttributeType: "S"
      KeySchema: # Specifies the primary key. For Board Games, it is the title of the board game
        - AttributeName: "title"
          KeyType: "HASH"
        - AttributeName: "date"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  AddBoardGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/board_game/add
      Handler: add_board_game.lambda_handler
      Events:
        AddBoardGame:
          Type: Api
          Properties:
            Path: /boardgames
            Method: post
            RestApiId: !Ref BoardGameAPI
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref BoardGamesTable
      Environment:
        Variables:
          TABLE_NAME: !Ref BoardGamesTable
      Tags:
        Stack: !Sub "${AWS::StackName}"

  GetBoardGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/board_game/get
      Handler: get_board_game.lambda_handler
      Events:
        GetBoardGame:
          Type: Api
          Properties:
            Path: /boardgames/{title}
            Method: get
            RestApiId: !Ref BoardGameAPI
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BoardGamesTable
      Environment:
        Variables:
          TABLE_NAME: !Ref BoardGamesTable
      Tags:
        Stack: !Sub "${AWS::StackName}"

  GetAllBoardGamesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/board_game/get
      Handler: get_all_board_games.lambda_handler
      Events:
        GetAllBoardGames:
          Type: Api
          Properties:
            Path: /boardgames
            Method: get
            RestApiId: !Ref BoardGameAPI
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BoardGamesTable
      Environment:
        Variables:
          TABLE_NAME: !Ref BoardGamesTable
      Tags:
        Stack: !Sub "${AWS::StackName}"

  DeleteBoardGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/board_game/delete
      Handler: delete_board_game.lambda_handler
      Events:
        DeleteBoardGame:
          Type: Api
          Properties:
            Path: /boardgames/{title}
            Method: delete
            RestApiId: !Ref BoardGameAPI
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BoardGamesTable
      Environment:
        Variables:
          TABLE_NAME: !Ref BoardGamesTable
      Tags:
        Stack: !Sub "${AWS::StackName}"

  BoardGameAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'content-type,access-control-allow-origin'"
        AllowOrigin: "'*'"
      OpenApiVersion: 3.0.1
      TracingEnabled: true
      Tags:
        Name: !Sub "${AWS::StackName}-API"
        Stack: !Sub "${AWS::StackName}"
#      Auth:
#        DefaultAuthorizer: LambdaRequestAuthorizer
#        Authorizers:
#          LambdaRequestAuthorizer:
#            FunctionArn: !GetAtt AuthorizerFunction.Arn
#            Identity:
#              Headers:
#                - Authorization

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-UserPool"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      UsernameAttributes:
        - email
      UserPoolTags:
        Key: Name
        Value: !Sub "${AWS::StackName}-UserPool"

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
      CallbackURLs:
        - 'http://localhost'
      ClientName:
        !Sub "${AWS::StackName}-UserPoolClient"
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref UserPoolClient
      UserPoolId: !Ref UserPool

  ApiAdministratorsUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: !Ref UserPoolAdminGroupName
      Description: !Sub "User group for ${UserPoolAdminGroupName}"
      Precedence: 0
      UserPoolId: !Ref UserPool

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/authorizer
      Handler: authorizer.lambda_handler
      Runtime: python3.12
      Timeout: 5
      MemorySize: 128
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          APPLICATION_CLIENT_ID: !Ref UserPoolClient
          ADMIN_GROUP_NAME: !Ref UserPoolAdminGroupName
      Tags:
        Stack: !Sub "${AWS::StackName}"

  # Setting Bucket policy as per the documentation
  # https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteAccessPermissionsReqd.html
  BoardGameBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-boardgamebucket"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: FALSE
        BlockPublicPolicy: FALSE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: FALSE
      Tags:
        - Key: Stack
          Value: !Sub "${AWS::StackName}"

  BoardGameBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BoardGameBucket
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: !Sub "${BoardGameBucket.Arn}/*"
            Principal:
              Service: "cloudfront.amazonaws.com"
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"
          - Sid: AllowGetPutListObject
            Effect: Allow
            Principal: "*"
            Action:
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:PutObject"
            Resource:
              - !GetAtt BoardGameBucket.Arn
              - !Sub "${BoardGameBucket.Arn}/*"

  BoardGameCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-BoardGameCloudFrontOriginAccessControl"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: IndexDocument
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
        Origins:
          - Id: S3Origin
            DomainName: !Sub "${BoardGameBucket}.s3.${AWS::Region}.amazonaws.com"
#            DomainName: !Sub "${BoardGameBucket}.s3-website-${AWS::Region}.amazonaws.com"
            # board-game-app-dev-boardgamebucket.s3-website-us-east-1.amazonaws.com
#            OriginPath: !Sub "/${BoardGameBucket}"
            S3OriginConfig:
              OriginAccessIdentity: ""
                # specifying empty OAI to use OAC as per:
                # https://docs:aws:amazon:com/cloudfront/latest/APIReference/API_S3OriginConfig:html
#              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${BoardGameCloudFrontOriginAccessIdentity}"
          - Id: ApiGatewayOrigin
            DomainName: !Sub "${BoardGameAPI}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: "/Prod"
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only

Outputs:

  APIEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${BoardGameAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  CognitoLoginURL:
    Description: Cognito Login URL
    Value: !Sub 'https://${UserPoolClient}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=http://localhost'

  CognitoAuthCommand:
    Description: AWS CLI command for Amazon Cognito User Pool authentication
    Value: !Sub 'aws cognito-idp initiate-auth --auth-flow USER_PASSWORD_AUTH --client-id ${UserPoolClient} --auth-parameters USERNAME=<user@example.com>,PASSWORD=<password> --query "AuthenticationResult.IdToken" --output text'